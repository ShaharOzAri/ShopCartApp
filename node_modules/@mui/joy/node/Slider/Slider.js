"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var React = _interopRequireWildcard(require("react"));

var _utils = require("@mui/utils");

var _system = require("@mui/system");

var _base = require("@mui/base");

var _styles = require("../styles");

var _styled = _interopRequireDefault(require("../styles/styled"));

var _shouldSpreadAdditionalProps = _interopRequireDefault(require("../utils/shouldSpreadAdditionalProps"));

var _sliderClasses = _interopRequireWildcard(require("./sliderClasses"));

var _jsxRuntime = require("react/jsx-runtime");

const _excluded = ["ownerState"],
      _excluded2 = ["component", "components", "componentsProps", "color", "size"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const useUtilityClasses = ownerState => {
  const {
    disabled,
    orientation,
    track,
    size,
    color
  } = ownerState;
  const slots = {
    root: ['root', disabled && 'disabled', orientation === 'vertical' && 'vertical', track === 'inverted' && 'trackInverted', track === false && 'trackFalse', color && `color${(0, _utils.unstable_capitalize)(color)}`, size && `size${(0, _utils.unstable_capitalize)(size)}`],
    rail: ['rail'],
    track: ['track'],
    mark: ['mark'],
    markLabel: ['markLabel'],
    valueLabel: ['valueLabel'],
    thumb: ['thumb', disabled && 'disabled']
  };
  return (0, _base.unstable_composeClasses)(slots, _sliderClasses.getSliderUtilityClass, {});
};

const sliderColorVariables = ({
  theme,
  ownerState
}) => (data = {}) => {
  var _theme$vars$palette, _theme$vars$palette2, _theme$vars$palette3;

  const color = ownerState.color;
  return {
    '--Slider-track-background': (_theme$vars$palette = theme.vars.palette[color]) == null ? void 0 : _theme$vars$palette[`solid${data.state || ''}Bg`],
    '--Slider-track-color': '#fff',
    '--Slider-rail-background': theme.vars.palette.background.level2,
    '--Slider-thumb-background': (_theme$vars$palette2 = theme.vars.palette[color]) == null ? void 0 : _theme$vars$palette2[`solid${data.state || ''}Color`],
    '--Slider-thumb-color': (_theme$vars$palette3 = theme.vars.palette[color]) == null ? void 0 : _theme$vars$palette3[`plain${data.state || ''}Color`]
  };
};

const SliderRoot = (0, _styled.default)('span', {
  name: 'JoySlider',
  slot: 'Root',
  overridesResolver: (props, styles) => styles.root
})(({
  theme,
  ownerState
}) => {
  const getColorVariables = sliderColorVariables({
    theme,
    ownerState
  });
  return [(0, _extends2.default)({
    '--Slider-size': 'max(42px, max(var(--Slider-thumb-size), var(--Slider-track-size)))',
    // Reach 42px touch target, about ~8mm on screen.
    '--Slider-track-radius': 'var(--Slider-size)',
    '--Slider-mark-background': theme.vars.palette.text.tertiary,
    [`& .${_sliderClasses.default.markActive}`]: {
      '--Slider-mark-background': 'var(--Slider-track-color)'
    }
  }, ownerState.size === 'sm' && {
    '--Slider-mark-size': '2px',
    '--Slider-track-size': '4px',
    '--Slider-thumb-size': '10px',
    '--Slider-valueLabel-arrowSize': '6px'
  }, ownerState.size === 'md' && {
    '--Slider-mark-size': '2px',
    '--Slider-track-size': '6px',
    '--Slider-thumb-size': '14px',
    '--Slider-valueLabel-arrowSize': '8px'
  }, ownerState.size === 'lg' && {
    '--Slider-mark-size': '3px',
    '--Slider-track-size': '10px',
    '--Slider-thumb-size': '20px',
    '--Slider-valueLabel-arrowSize': '10px'
  }, {
    '--Slider-thumb-radius': 'calc(var(--Slider-thumb-size) / 2)',
    '--Slider-thumb-width': 'var(--Slider-thumb-size)'
  }, getColorVariables(), {
    '&:hover': (0, _extends2.default)({}, getColorVariables({
      state: 'Hover'
    })),
    [`&.${_sliderClasses.default.disabled}`]: (0, _extends2.default)({
      pointerEvents: 'none',
      color: theme.vars.palette.text.tertiary
    }, getColorVariables({
      state: 'Disabled'
    })),
    [`&.${_sliderClasses.default.dragging}`]: {
      [`& .${_sliderClasses.default.track}, & .${_sliderClasses.default.thumb}`]: {
        transition: 'none'
      }
    },
    boxSizing: 'content-box',
    display: 'inline-block',
    position: 'relative',
    cursor: 'pointer',
    touchAction: 'none',
    WebkitTapHighlightColor: 'transparent'
  }, ownerState.orientation === 'horizontal' && {
    padding: 'calc(var(--Slider-size) / 2) 0',
    width: '100%'
  }, ownerState.orientation === 'vertical' && {
    padding: '0 calc(var(--Slider-size) / 2)',
    height: '100%'
  }, {
    '@media print': {
      colorAdjust: 'exact'
    }
  })];
});
const SliderRail = (0, _styled.default)('span', {
  name: 'JoySlider',
  slot: 'Rail',
  overridesResolver: (props, styles) => styles.rail
})(({
  ownerState
}) => [(0, _extends2.default)({
  display: 'block',
  position: 'absolute',
  backgroundColor: ownerState.track === 'inverted' ? 'var(--Slider-track-background)' : 'var(--Slider-rail-background)',
  borderRadius: 'var(--Slider-track-radius)'
}, ownerState.orientation === 'horizontal' && {
  height: 'var(--Slider-track-size)',
  top: '50%',
  left: 0,
  right: 0,
  transform: 'translateY(-50%)'
}, ownerState.orientation === 'vertical' && {
  width: 'var(--Slider-track-size)',
  top: 0,
  bottom: 0,
  left: '50%',
  transform: 'translateX(-50%)'
}, ownerState.track === 'inverted' && {
  opacity: 1
})]);
const SliderTrack = (0, _styled.default)('span', {
  name: 'JoySlider',
  slot: 'Track',
  overridesResolver: (props, styles) => styles.track
})(({
  ownerState
}) => {
  return [(0, _extends2.default)({
    display: 'block',
    position: 'absolute',
    color: 'var(--Slider-track-color)',
    backgroundColor: ownerState.track === 'inverted' ? 'var(--Slider-rail-background)' : 'var(--Slider-track-background)',
    // TODO: discuss the transition approach in a separate PR. This value is copied from mui-material Slider.
    transition: 'left 150ms cubic-bezier(0.4, 0, 0.2, 1) 0ms, width 150ms cubic-bezier(0.4, 0, 0.2, 1) 0ms, bottom 150ms cubic-bezier(0.4, 0, 0.2, 1) 0ms, height 150ms cubic-bezier(0.4, 0, 0.2, 1) 0ms'
  }, ownerState.orientation === 'horizontal' && {
    height: 'var(--Slider-track-size)',
    top: '50%',
    transform: 'translateY(-50%)',
    borderRadius: 'var(--Slider-track-radius) 0 0 var(--Slider-track-radius)'
  }, ownerState.orientation === 'vertical' && {
    width: 'var(--Slider-track-size)',
    left: '50%',
    transform: 'translateX(-50%)',
    borderRadius: '0 0 var(--Slider-track-radius) var(--Slider-track-radius)'
  }, ownerState.track === false && {
    display: 'none'
  })];
});
const SliderThumb = (0, _styled.default)('span', {
  name: 'JoySlider',
  slot: 'Thumb',
  overridesResolver: (props, styles) => styles.thumb
})(({
  ownerState
}) => {
  return [(0, _extends2.default)({
    position: 'absolute',
    boxSizing: 'border-box',
    outline: 0,
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
    width: 'var(--Slider-thumb-width)',
    height: 'var(--Slider-thumb-size)',
    borderRadius: 'var(--Slider-thumb-radius)',
    boxShadow: 'var(--Slider-thumb-shadow)',
    border: '2px solid',
    borderColor: 'var(--Slider-thumb-color)',
    color: 'var(--Slider-thumb-color)',
    backgroundColor: 'var(--Slider-thumb-background)',
    // TODO: discuss the transition approach in a separate PR. This value is copied from mui-material Slider.
    transition: 'box-shadow 150ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,left 150ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,bottom 150ms cubic-bezier(0.4, 0, 0.2, 1) 0ms'
  }, ownerState.orientation === 'horizontal' && {
    top: '50%',
    transform: 'translate(-50%, -50%)'
  }, ownerState.orientation === 'vertical' && {
    left: '50%',
    transform: 'translate(-50%, 50%)'
  })];
});
const SliderMark = (0, _styled.default)('span', {
  name: 'JoySlider',
  slot: 'Mark',
  // `markActive` is injected by SliderUnstyled, should not spread to DOM
  shouldForwardProp: prop => (0, _system.shouldForwardProp)(prop) && prop !== 'markActive',
  overridesResolver: (props, styles) => styles.mark
})(_ref => {
  var _props$style, _props$style2;

  let {
    ownerState
  } = _ref,
      props = (0, _objectWithoutPropertiesLoose2.default)(_ref, _excluded);
  return (0, _extends2.default)({
    position: 'absolute',
    width: 'var(--Slider-mark-size)',
    height: 'var(--Slider-mark-size)',
    borderRadius: 'var(--Slider-mark-size)',
    backgroundColor: 'var(--Slider-mark-background)'
  }, ownerState.orientation === 'horizontal' && (0, _extends2.default)({
    top: '50%',
    transform: `translate(calc(var(--Slider-mark-size) / -2), -50%)`
  }, props['data-index'] === 0 && {
    // data-index is from SliderUnstyled
    transform: `translate(min(var(--Slider-mark-size), 3px), -50%)`
  }, ((_props$style = props.style) == null ? void 0 : _props$style.left) === '100%' && {
    // workaround for detecting last mark
    transform: `translate(calc(var(--Slider-mark-size) * -1 - min(var(--Slider-mark-size), 3px)), -50%)`
  }), ownerState.orientation === 'vertical' && (0, _extends2.default)({
    left: '50%',
    transform: 'translate(-50%, calc(var(--Slider-mark-size) / 2))'
  }, props['data-index'] === 0 && {
    // data-index is from SliderUnstyled
    transform: `translate(-50%, min(var(--Slider-mark-size), 3px))`
  }, ((_props$style2 = props.style) == null ? void 0 : _props$style2.left) === '100%' && {
    // workaround for detecting last mark
    transform: `translate(-50%, calc(var(--Slider-mark-size) * -1 - min(var(--Slider-mark-size), 3px)))`
  }));
});
const SliderValueLabel = (0, _styled.default)(_base.SliderValueLabelUnstyled, {
  name: 'JoySlider',
  slot: 'ValueLabel',
  overridesResolver: (props, styles) => styles.valueLabel
})(({
  theme,
  ownerState
}) => (0, _extends2.default)({}, ownerState.size === 'sm' && {
  fontSize: theme.fontSize.xs,
  lineHeight: theme.lineHeight.md,
  paddingInline: '0.25rem',
  minWidth: '20px'
}, ownerState.size === 'md' && {
  fontSize: theme.fontSize.sm,
  lineHeight: theme.lineHeight.md,
  paddingInline: '0.375rem',
  minWidth: '24px'
}, ownerState.size === 'lg' && {
  fontSize: theme.fontSize.md,
  lineHeight: theme.lineHeight.md,
  paddingInline: '0.5rem',
  minWidth: '28px'
}, {
  zIndex: 1,
  display: 'flex',
  alignItems: 'center',
  justifyContent: 'center',
  whiteSpace: 'nowrap',
  fontFamily: theme.vars.fontFamily.body,
  fontWeight: theme.vars.fontWeight.md,
  bottom: '2px',
  transformOrigin: 'bottom center',
  transform: 'translateY(calc((var(--Slider-thumb-size) + var(--Slider-valueLabel-arrowSize)) * -1)) scale(0)',
  position: 'absolute',
  backgroundColor: theme.vars.palette.background.tooltip,
  boxShadow: theme.vars.shadow.sm,
  borderRadius: theme.vars.radius.xs,
  color: '#fff',
  '&::before': {
    display: 'var(--Slider-valueLabel-arrowDisplay)',
    position: 'absolute',
    content: '""',
    bottom: 0,
    width: 'var(--Slider-valueLabel-arrowSize)',
    height: 'var(--Slider-valueLabel-arrowSize)',
    left: '50%',
    transform: 'translate(-50%, 50%) rotate(45deg)',
    backgroundColor: 'inherit'
  },
  [`&.${_sliderClasses.default.valueLabelOpen}`]: {
    transform: 'translateY(calc((var(--Slider-thumb-size) + var(--Slider-valueLabel-arrowSize)) * -1)) scale(1)'
  },
  [`& .${_sliderClasses.default.valueLabelCircle}`]: {
    display: 'inline-flex',
    zIndex: 1
  }
}));
const SliderMarkLabel = (0, _styled.default)('span', {
  name: 'JoySlider',
  slot: 'MarkLabel',
  // `markLabelActive` is injected by SliderUnstyled, should not spread to DOM
  shouldForwardProp: prop => (0, _system.shouldForwardProp)(prop) && prop !== 'markLabelActive',
  overridesResolver: (props, styles) => styles.markLabel
})(({
  theme,
  ownerState
}) => (0, _extends2.default)({
  fontFamily: theme.vars.fontFamily.body
}, ownerState.size === 'sm' && {
  fontSize: theme.vars.fontSize.xs
}, ownerState.size === 'md' && {
  fontSize: theme.vars.fontSize.sm
}, ownerState.size === 'lg' && {
  fontSize: theme.vars.fontSize.md
}, {
  color: theme.palette.text.tertiary,
  position: 'absolute',
  whiteSpace: 'nowrap'
}, ownerState.orientation === 'horizontal' && {
  top: 'calc(50% + (max(var(--Slider-track-size), var(--Slider-thumb-size)) / 2))',
  transform: 'translateX(-50%)'
}, ownerState.orientation === 'vertical' && {
  left: 36,
  transform: 'translateY(50%)'
}));
const Slider = /*#__PURE__*/React.forwardRef(function Slider(inProps, ref) {
  const props = (0, _styles.useThemeProps)({
    props: inProps,
    name: 'JoySlider'
  });
  const {
    component = 'span',
    components = {},
    componentsProps = {},
    color = 'primary',
    size = 'md'
  } = props,
        other = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded2);
  const ownerState = (0, _extends2.default)({}, props, {
    size,
    color
  });
  const classes = useUtilityClasses(ownerState);
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_base.SliderUnstyled, (0, _extends2.default)({}, other, {
    ref: ref,
    classes: classes,
    components: (0, _extends2.default)({
      Root: SliderRoot,
      Rail: SliderRail,
      Track: SliderTrack,
      Thumb: SliderThumb,
      ValueLabel: SliderValueLabel,
      Mark: SliderMark,
      MarkLabel: SliderMarkLabel
    }, components),
    componentsProps: (0, _extends2.default)({}, componentsProps, {
      root: (0, _extends2.default)({}, componentsProps.root, (0, _shouldSpreadAdditionalProps.default)(components.Root) && {
        as: component,
        ownerState
      }),
      thumb: (0, _extends2.default)({}, componentsProps.thumb, (0, _shouldSpreadAdditionalProps.default)(components.Thumb) && {
        ownerState
      }),
      track: (0, _extends2.default)({}, componentsProps.track, (0, _shouldSpreadAdditionalProps.default)(components.Track) && {
        ownerState
      }),
      valueLabel: (0, _extends2.default)({}, componentsProps.valueLabel, (0, _shouldSpreadAdditionalProps.default)(components.ValueLabel) && {
        ownerState
      }),
      markLabel: (0, _extends2.default)({}, componentsProps.markLabel, (0, _shouldSpreadAdditionalProps.default)(components.ValueLabel) && {
        ownerState
      })
    })
  }));
});
process.env.NODE_ENV !== "production" ? Slider.propTypes
/* remove-proptypes */
= {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------

  /**
   * @ignore
   */
  children: _propTypes.default.node,

  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'primary'
   */
  color: _propTypes.default.oneOf(['danger', 'info', 'neutral', 'primary', 'success', 'warning']),

  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: _propTypes.default.elementType,

  /**
   * The components used for each slot inside the Slider.
   * Either a string to use a HTML element or a component.
   * @default {}
   */
  components: _propTypes.default.shape({
    Input: _propTypes.default.elementType,
    Mark: _propTypes.default.elementType,
    MarkLabel: _propTypes.default.elementType,
    Rail: _propTypes.default.elementType,
    Root: _propTypes.default.elementType,
    Thumb: _propTypes.default.elementType,
    Track: _propTypes.default.elementType,
    ValueLabel: _propTypes.default.elementType
  }),

  /**
   * The props used for each slot inside the Slider.
   * @default {}
   */
  componentsProps: _propTypes.default.shape({
    input: _propTypes.default.object,
    mark: _propTypes.default.object,
    markLabel: _propTypes.default.object,
    rail: _propTypes.default.object,
    root: _propTypes.default.object,
    thumb: _propTypes.default.object,
    track: _propTypes.default.object,
    valueLabel: _propTypes.default.shape({
      children: _propTypes.default.element,
      className: _propTypes.default.string,
      components: _propTypes.default.shape({
        Root: _propTypes.default.elementType
      }),
      open: _propTypes.default.bool,
      style: _propTypes.default.object,
      value: _propTypes.default.number,
      valueLabelDisplay: _propTypes.default.oneOf(['auto', 'off', 'on'])
    })
  }),

  /**
   * The size of the component.
   * It accepts theme values between 'sm' and 'lg'.
   * @default 'md'
   */
  size: _propTypes.default.oneOf(['sm', 'md', 'lg']),

  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object])
} : void 0;
var _default = Slider;
exports.default = _default;