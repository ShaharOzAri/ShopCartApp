import { BreakpointsOptions, SpacingOptions } from '@mui/system';
import { DefaultColorScheme, ExtendedColorScheme } from './types/colorScheme';
import { ColorSystem } from './types/colorSystem';
import { Focus } from './types/focus';
import { TypographySystem } from './types/typography';
import { Variants } from './types/variants';
import { Theme, ThemeCSSVar, ThemeScales } from './types';
import { Components } from './components';
declare type Partial2Level<T> = {
    [K in keyof T]?: T[K] extends Record<any, any> ? {
        [J in keyof T[K]]?: T[K][J];
    } : T[K];
};
declare type Partial3Level<T> = {
    [K in keyof T]?: {
        [J in keyof T[K]]?: T[K][J] extends Record<any, any> ? {
            [P in keyof T[K][J]]?: T[K][J][P];
        } : T[K][J];
    };
};
export interface ColorSystemInput extends Partial3Level<ColorSystem> {
}
export interface ThemeInput extends Partial2Level<ThemeScales> {
    focus?: Partial<Focus>;
    typography?: Partial<TypographySystem>;
    variants?: Partial2Level<Variants>;
    breakpoints?: BreakpointsOptions;
    spacing?: SpacingOptions;
    components?: Components<Theme>;
    colorSchemes?: Partial<Record<DefaultColorScheme | ExtendedColorScheme, ColorSystemInput>>;
}
export declare const createGetCssVar: (prefix?: string) => <AdditionalVars extends string = never>(field: ThemeCSSVar | AdditionalVars, ...vars: (ThemeCSSVar | AdditionalVars)[]) => string;
export default function extendTheme(themeInput?: ThemeInput): Theme;
export {};
